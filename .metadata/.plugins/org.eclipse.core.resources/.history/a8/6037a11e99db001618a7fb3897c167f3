package gameService;

import static org.junit.Assert.assertEquals;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;
import org.springframework.boot.test.web.client.TestRestTemplate;
import org.springframework.http.ResponseEntity;
import org.springframework.test.context.junit4.SpringRunner;

import gameCommon.GameProperties;
import gameCommon.Mark;
import gameCommon.MarkOutcome;
import gameCommon.MarkStatus;
import gameCommon.Player;
import gameCommon.Square;

@RunWith(SpringRunner.class)
@SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT)
public class GameRestControllerTest {

    @Autowired
    private TestRestTemplate restTemplate;

    @Test
    public void test() {
	// Game ID
	int gameID = this.restTemplate.getForObject(GameProperties.NEW_GAME_PATH, Integer.class);

	String squareNumberToBeSelected = "1\n4\n2\n5\n3\n0";

	Mark currentMark = new Mark(gameID, Player.X, Square.ONE);
	ResponseEntity<MarkOutcome> responseEntity = restTemplate.postForEntity(GameProperties.MARK_PATH, currentMark,
		MarkOutcome.class);
	MarkOutcome markOutcome = responseEntity.getBody();
	assertEquals(MarkStatus.CONTINUE, markOutcome.getMarkStatus());

	currentMark = new Mark(gameID, Player.O, Square.FOUR);
	responseEntity = restTemplate.postForEntity(GameProperties.MARK_PATH, currentMark, MarkOutcome.class);
	markOutcome = responseEntity.getBody();
	assertEquals(MarkStatus.CONTINUE, markOutcome.getMarkStatus());

	currentMark = new Mark(gameID, Player.X, Square.TWO);
	responseEntity = restTemplate.postForEntity(GameProperties.MARK_PATH, currentMark, MarkOutcome.class);
	markOutcome = responseEntity.getBody();
	assertEquals(MarkStatus.CONTINUE, markOutcome.getMarkStatus());

	currentMark = new Mark(gameID, Player.X, Square.FIVE);
	responseEntity = restTemplate.postForEntity(GameProperties.MARK_PATH, currentMark, MarkOutcome.class);
	markOutcome = responseEntity.getBody();
	assertEquals(MarkStatus.CONTINUE, markOutcome.getMarkStatus());

	currentMark = new Mark(gameID, Player.X, Square.THREE);
	responseEntity = restTemplate.postForEntity(GameProperties.MARK_PATH, currentMark, MarkOutcome.class);
	markOutcome = responseEntity.getBody();
	assertEquals(MarkStatus.CONTINUE, markOutcome.getMarkStatus());

    }

}
