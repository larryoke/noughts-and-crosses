package gameClient;

import java.util.Scanner;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.autoconfigure.web.EmbeddedServletContainerAutoConfiguration;
import org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration;
import org.springframework.context.annotation.Bean;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.client.RestTemplate;

import gameClient.view.Board;
import gameCommon.GameProperties;
import gameCommon.Play;
import gameCommon.PlayResult;
import gameCommon.PlayStatus;
import gameCommon.Player;
import gameCommon.Square;

@SpringBootApplication(exclude = { EmbeddedServletContainerAutoConfiguration.class, WebMvcAutoConfiguration.class })
public class GameClientApplication extends BaseGameClientApplication {

    private static final Logger logger = LoggerFactory.getLogger(GameClientApplication.class);

    private Player currentPlayer = Player.X;

    private Board board;

    private int gameID;

    private void swapPlayerTurn() {
	if (Player.X.equals(currentPlayer)) {
	    currentPlayer = Player.O;

	} else if (Player.O.equals(currentPlayer)) {
	    currentPlayer = Player.X;
	}
    }

    private void updateBoardDisplay(Square selectedSquare) {
	if (Player.O.equals(currentPlayer)) {
	    board.playO(selectedSquare);

	} else if (Player.X.equals(currentPlayer)) {
	    board.playX(selectedSquare);
	}
    }

    public static void main(String[] args) throws Exception {
	SpringApplication.run(GameClientApplication.class, args);
    }

    // @Bean
    // public CommandLineRunner run(RestTemplate restTemplate) throws Exception
    // {
    // return args -> {
    // logger.info("\n\nWelcome ");
    //
    // logger.info("Attempting to obtain Game ID...");
    // gameID = restTemplate.getForObject(GameProperties.NEW_GAME_URI,
    // Integer.class);
    // logger.info(String.format("Game %s initialised", gameID));
    //
    // board = new Board();
    //
    // try (Scanner scanner = new Scanner(System.in)) {
    //
    // int answer = 0;
    // do {
    // logger.info(board.toString() + "\n Turn: " + currentPlayer
    // + "\n Choose square[1..9] to play or 0 to quit: ");
    // try {
    // answer = scanner.nextInt();
    //
    // Square selectedSquare = Square.getSquareByNo(answer);
    // Play currentPlay = new Play(gameID, currentPlayer, selectedSquare);
    //
    // ResponseEntity<PlayResult> responseEntity =
    // restTemplate.postForEntity(GameProperties.PLAY_URI,
    // currentPlay, PlayResult.class);
    //
    // if (HttpStatus.OK.equals(responseEntity.getStatusCode())) {
    // PlayResult result = responseEntity.getBody();
    // updateBoardDisplay(selectedSquare);
    //
    // if (PlayStatus.CONTINUE.equals(result.getPlayStatus())) {
    // swapPlayerTurn();
    //
    // } else if (PlayStatus.WIN.equals(result.getPlayStatus())
    // || PlayStatus.DRAW.equals(result.getPlayStatus())) {
    // logger.info(board.toString() + "\n =================\n "
    // + responseEntity.getBody().getScore() + "\n Player " + currentPlayer
    // + " wins\n =================\n ");
    //
    // board.clear();
    //
    // answer = newGamePrompt();
    // }
    //
    // } else if (HttpStatus.BAD_REQUEST.equals(responseEntity.getStatusCode()))
    // {
    // logger.info("\n" + responseEntity.getBody().getErrorMessage());
    // }
    //
    // } catch (NoSuchElementException e) {
    // logger.error("Incorrect input, please try again");
    // }
    // } while (answer != 0);
    // }
    // };
    // }

    @Bean
    public CommandLineRunner run(RestTemplate restTemplate) throws Exception {
	return args -> {

	    logger.info("Attempting to obtain Game ID...");
	    gameID = restTemplate.getForObject(GameProperties.NEW_GAME_URI, Integer.class);
	    logger.info(String.format("Game %s initialised", gameID));

	    logger.info("\n\n ==========\n Game Rules\n ==========" + "\n There are 9 squares on the game board, "
		    + "\n square 1 is the top left cell, " + "\n square 2 is the top center cell, "
		    + "\n square 3 is the top right cell," + "\n square 4 is the center left cell,"
		    + "\n square 5 is the center cell," + "\n square 6 is the center right cell,"
		    + "\n square 7 is the botton left cell," + "\n square 8 is the botton center cell,"
		    + "\n square 9 is bottom etc ");

	    board = new Board();

	    try (Scanner scanner = new Scanner(System.in)) {

		int answer = 0;
		while (true) {
		    logger.info(board.toString() + "\n\n Turn: " + currentPlayer
			    + "\n Please select [1..9] to mark a square or 0 to quit: ");
		    if (scanner.hasNext()) {

			if (!scanner.hasNextInt()) {
			    scanner.next();
			    logger.error("\n\n Incorrect input, please try again\n\n ");
			    continue;
			}
			answer = scanner.nextInt();

			if (answer == 0) {
			    break;
			}

			Square selectedSquare = Square.getSquareByNo(answer);
			Play currentPlay = new Play(gameID, currentPlayer, selectedSquare);

			ResponseEntity<PlayResult> responseEntity = restTemplate.postForEntity(GameProperties.PLAY_URI,
				currentPlay, PlayResult.class);

			if (HttpStatus.OK.equals(responseEntity.getStatusCode())) {
			    PlayResult result = responseEntity.getBody();
			    updateBoardDisplay(selectedSquare);

			    if (PlayStatus.CONTINUE.equals(result.getPlayStatus())) {
				swapPlayerTurn();

			    } else if (PlayStatus.WIN.equals(result.getPlayStatus())
				    || PlayStatus.DRAW.equals(result.getPlayStatus())) {
				logger.info(board.toString() + "\n =================\n "
					+ responseEntity.getBody().getScore() + "\n Player " + currentPlayer
					+ " wins\n =================\n ");

				board.clear();

				currentPlayer = Player.X;
				logger.info("\n New game started");
			    }

			} else if (HttpStatus.BAD_REQUEST.equals(responseEntity.getStatusCode())) {
			    logger.info("\n" + responseEntity.getBody().getErrorMessage());
			}

		    }
		}
	    }
	};
    }
}
