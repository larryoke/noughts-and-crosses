package gameClient;

import static org.junit.Assert.assertEquals;
import static org.mockito.Matchers.any;
import static org.mockito.Matchers.anyString;
import static org.mockito.Matchers.eq;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.io.ByteArrayInputStream;
import java.util.Map;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.ArgumentCaptor;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.springframework.http.ResponseEntity;
import org.springframework.web.client.RestTemplate;

import gameCommon.GameProperties;
import gameCommon.MarkOutcome;
import gameCommon.MarkStatus;

@RunWith(MockitoJUnitRunner.class)
public class GameClientApplication2Test {

    @Mock
    private RestTemplate restTemplate;

    @Mock
    private ResponseEntity<MarkOutcome> responseEntity;

    @InjectMocks
    private GameClientApplication gameClientApplication;

	int gameNumber = 3;

    @Test
    public void test() throws Exception {

	when(restTemplate.getForObject(GameProperties.NEW_GAME_URI, Integer.class)).thenReturn(gameNumber);

	when(restTemplate.postForEntity(anyString(), any(Integer.class), eq(MarkOutcome.class)))
		.thenReturn(responseEntity);

	MarkOutcome markOutcome = new MarkOutcome(MarkStatus.CONTINUE, null, null);
	when(responseEntity.getBody()).thenReturn(markOutcome);

	//
	String squareNumberToBeSelected = "1\n0";
	ByteArrayInputStream in = new ByteArrayInputStream(squareNumberToBeSelected.getBytes());

	System.setIn(in);

	String nullValue = null;
	gameClientApplication.run(restTemplate).run(nullValue);

	verify(restTemplate, times(1)).getForObject(GameProperties.NEW_GAME_URI, Integer.class);

    }

    @Test
    public void testQuitGameOnInitialCommandLinePrompt() throws Exception {

	when(restTemplate.getForObject(GameProperties.NEW_GAME_URI, Integer.class)).thenReturn(gameNumber);

	//
	String squareNumberToBeSelected = "0";
	ByteArrayInputStream in = new ByteArrayInputStream(squareNumberToBeSelected.getBytes());

	System.setIn(in);

	String nullValue = null;
	gameClientApplication.run(restTemplate).run(nullValue);

	verify(restTemplate, times(1)).getForObject(GameProperties.NEW_GAME_URI, Integer.class);

	ArgumentCaptor<String> gameEndURICaptor = ArgumentCaptor.forClass(String.class);
	@SuppressWarnings("rawtypes")
	ArgumentCaptor<Map> uriVarCaptor = ArgumentCaptor.forClass(Map.class);
	verify(restTemplate, times(1)).delete(gameEndURICaptor.capture(), uriVarCaptor.capture());
	assertEquals(GameProperties.GAME_END_URI, gameEndURICaptor.getValue());
	assertEquals(gameNumber, uriVarCaptor.getValue().get("gameID"));

    }

}
